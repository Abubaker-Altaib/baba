# -*- coding: utf-8 -*-
##############################################################################
#
# NCTR, Nile Center for Technology Research
# Copyright (C) 2011-2012 NCTR (<http://www.nctr.sd>).
#
##########################################################################

from osv import fields,osv
import time
import netsvc
from tools.translate import _
import decimal_precision as dp

#----------------------------------------
# Class car maintenance request
#----------------------------------------
class car_maintenance_request(osv.osv):
    _name = "car.maintenance.request"
    _description = 'car maintenance request'

    
    def create(self, cr, user, vals, context=None):
        """
        Create new entry sequence for every new car maintenance request Record
        @param vals: record to be created
        @return: return a result that create a new record in the database
          """
        if ('name' not in vals) or (vals.get('name')=='/'):  
            vals['name'] = self.pool.get('ir.sequence').get(cr, user, 'car.maintenance.request')
        return super(car_maintenance_request, self).create(cr, user, vals, context) 

    def _amount_all(self, cr, uid, ids,field_name, arg, context={}):
        """ Finds the value of total prices of faults.
        @param field_name: list contains name of fields that call this method
        @param arg: extra arguement
        @return: Dictionary of values
        """
        res={}
        for record in self.browse(cr, uid, ids, context=context):
            val = 0.0
            for line in record.faults:
                val += line.price_subtotal
            res[record.id] = val 
        return res   
    
    MAINTENANCE_TYPE_SELECTION = [
    ('regular', 'Regular'),
    ('emergency', 'Emergency'),
 ]  
    STATE_SELECTION = [
    ('draft', 'Draft'),
    ('confirmed_d', 'Waiting for department manager To confirm'),
    ('confirmed_gd', 'Waiting for General department manager to confirm '),
    ('confirmed_gm', 'Waiting for admin  affairs  general manager to confirm'),
    ('approved', 'Waiting for admin  affairs manager to approve'),
    ('approved_of', 'Waiting for admin affairs officer'),
    ('execute', 'Waiting for maintenance engineer to execute '),   
    ('check', 'Check'),
    ('done', 'Done'),
    ('cancel', 'Cancel'), 
    ]    

    _order = "name desc"
    _columns = {
    'name': fields.char('Reference', size=64, required=True, select=True, readonly=True, help="unique number of the car maintenance "),
    'date' : fields.date('Request Date',required=True, readonly=True,),
    'department_id':fields.many2one('hr.department', 'Department', readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}), 
    'partner_id':fields.many2one('res.partner', 'Partner', readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}),
      
    'car_id':  fields.many2one('fleet.vehicles', 'Car Name', required=True, readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}),
    'car_number': fields.related('car_id', 'plate_no', type='char', relation='fleet.vehicles', string='Car Number', readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}),
    'driver':  fields.related('car_id','driver_id', type='many2one' , relation='hr.employee' ,string='Driver',required=False , readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}),
    'entry_date':fields.related('car_id', 'bdate', type='date', relation='fleet.vehicles', string='Entry Date', help="Date on which the mileage is recorded", readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}),
    'base_mileage':fields.related('car_id', 'cmil', type='float', relation='fleet.vehicles', string='Current Mileage', readonly=True,help="The last recorded mileage"),
    'next_mileage':fields.float('Next Mileage',digits=(16,3),help="The next mileage", readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}),
    'maintenance_type': fields.selection(MAINTENANCE_TYPE_SELECTION, 'Maintenance Type', required=True, readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}), 
    'notes': fields.text('Notes', size=256 , readonly=True,states={'draft':[('readonly',False)],'confirmed_d':[('readonly',False)],'confirmed_gd':[('readonly',False)],}), 
    'company_id': fields.many2one('res.company','Company',required=True,readonly=True),
    'faults':fields.one2many('car.faults', 'fault_id' , 'Car Faults', readonly=True,states={'draft':[('readonly',False)],'execute':[('readonly',False)],'check':[('readonly',False)],}),
    'total_amount': fields.function(_amount_all, method=True, digits_compute=dp.get_precision('Account'), string='Amount' , store = True),    
    'state': fields.selection(STATE_SELECTION,'State', readonly=True, select=True),
    'user_id':  fields.many2one('res.users', 'Responsible', readonly=True  ),    
   

    }
    
    _sql_constraints = [
        ('name_uniq', 'unique(name)', 'car maintenance reference must be unique !'),
        ]
    
    _defaults = {
                'name': lambda self, cr, uid, context: '/',
                'date': lambda *a: time.strftime('%Y-%m-%d'),
                'company_id': lambda self, cr, uid, c: self.pool.get('res.company')._company_default_get(cr, uid, 'car.maintenance.request', context=c),
                'state': 'draft',
                'user_id': lambda self, cr, uid, context: uid,
                
                }

    """ Workflow Functions"""
     
    def confirmed_d(self, cr, uid, ids, context=None):
        for record in self.browse(cr, uid, ids):
            if not record.faults:
                raise osv.except_osv(_('No Faults  !'), _('Please Fault Item Details ..'))                         
        self.write(cr, uid, ids, {'state':'confirmed_d'})
        return True

    def confirmed_gd(self, cr, uid, ids, context=None):             
        self.write(cr, uid, ids, {'state':'confirmed_gd'})
        return True

    def confirmed_gm(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'confirmed_gm'},context=context)
        return True
    
    def approved(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'approved'},context=context)
        return True

    def approved_of(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'approved_of'},context=context)
        return True

    def execute(self,cr,uid,ids,context=None):      
        self.write(cr, uid, ids, {'state':'execute'},context=context)      
        return True

    def check(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'check'},context=context)
        for record in self.browse(cr, uid, ids):
            for fault in record.faults:
                fault.write({'added_by_supplier':False}) 
                if fault.price_unit == 0.0:
                    raise osv.except_osv(_('No Price !'), _('Please make sure you enter prices for all items'))                                
        return True    

    def done(self,cr,uid,ids,context=None):
        
        for record in self.browse(cr, uid, ids):
            if not record.faults:
                raise osv.except_osv(_('No Faults  !'), _('Please Fault Item Details ..')) 
            else:
                for line in record.faults:
                    if line.price_unit == 0.0:
                        raise osv.except_osv(_('No Price !'), _('Please make sure you enter prices for all items'))             
        
        # Update Cars set Current milage maintinaces

            self.pool.get('fleet.vehicles').write(cr, uid,record.car_id.id ,{'cmil':record.next_mileage})        

        self.write(cr, uid, ids, {'state':'done'},context=context) 
        return True


    
    def cancel(self, cr, uid, ids, notes='', context=None):
        # Cancel Car Maintenance Request 
        #if not notes:
        notes = ""
        u = self.pool.get('res.users').browse(cr, uid,uid).name
        notes = notes +'\n'+'Car Maintenance Request Cancelled at : '+time.strftime('%Y-%m-%d') + ' by '+ u
        self.write(cr, uid, ids, {'state':'cancel','notes':notes})
        return True

    def ir_action_cancel_draft(self, cr, uid, ids, context=None):
        # Reset the Car Maintenance Request 
        if not len(ids):
            return False
        wf_service = netsvc.LocalService("workflow")
        for s_id in ids:
            self.write(cr, uid, s_id, {'state':'draft'})
            wf_service.trg_delete(uid, 'car.maintenance.request', s_id, cr)            
            wf_service.trg_create(uid, 'car.maintenance.request', s_id, cr)
        return True

    def unlink(self, cr, uid, ids, context=None):
        stat = self.read(cr, uid, ids, ['state'], context=context)
        unlink_ids = []
        for t in stat:
            if t['state'] in ('draft'):
                unlink_ids.append(t['id'])
            else:
                raise osv.except_osv(_('Invalid action !'), _('In order to delete a car maintenance request, you must first cancel it.'))
        osv.osv.unlink(self, cr, uid, unlink_ids, context=context)
        return True
    

car_maintenance_request()

class car_faults(osv.osv):
    
    _name = "car.faults"
    _description = 'Type of Fault'
    
    def _amount_line(self, cr, uid, ids, field_name, arg, context=None):
        """ Finds the value of faults in the car faults.
        @param field_name: list contains name of fields that call this method
        @param arg: extra arguement
        @return: Dictionary of values
        """
        context.update({'ids':ids})
        res = {}
        if context is None:
            context = {}
        for line in self.browse(cr, uid, ids, context=context):
            price = line.price_unit * line.product_qty or 0.0
            res[line.id] = price
        return res
       
    _columns = {
                'name': fields.char('Name', size=64 ,select=True,),
                'product_id': fields.many2one('product.product','Item',required=True,readonly=True,states={'draft':[('readonly',False)],'execute':[('readonly',False)],'check':[('readonly',False)],}),
                'product_qty': fields.float('Item Quantity', required=True, digits=(16,2),readonly=True,states={'draft':[('readonly',False)],'execute':[('readonly',False)],'check':[('readonly',False)],}),
                'product_uom': fields.many2one('product.uom', 'Item UOM',readonly=True,states={'draft':[('readonly',False)],'execute':[('readonly',False)],'check':[('readonly',False)],}),
                'fault_id': fields.many2one('car.maintenance.request', 'car maintenance request', ondelete='cascade'),
                'price_unit': fields.float('Unit Price', digits_compute=dp.get_precision('Account'),readonly=True ,store = True,states={'draft':[('readonly',False)],'execute':[('readonly',False)],'check':[('readonly',False)],}),   
                'price_subtotal': fields.function(_amount_line, method=True, string='Sub total',digits_compute=dp.get_precision('Account'),readonly=True, store = True),
                'added_by_supplier': fields.boolean('Added by supplier', help="By checking the Added by supplier field, you determine this product as adding by supplier",readonly=True,),               
                'state':fields.related('fault_id', 'state', type='char', relation='car.maintenance.request', string=' State', readonly=True,),
                
                            
                'notes': fields.text('Notes', size=256 ,),

               }
    _sql_constraints = [
        ('produc_uniq', 'unique(fuel_id,product_id)', 'Fault must be unique!'),
            ] 
     
    _defaults = {
                 'product_qty': 1.0,
                 'added_by_supplier':True,
                'state': 'draft',
                 
                 }  


    def product_id_change(self, cr, uid, ids,product,context=None):
        """
        When you select Product the id send to this method to read the default name and UOM of product
        @param cr: cursor to database
        @param user: id of current user
        @param ids: list of record ids to be process
        @param product: product_id 
        @return: return a result
        """
        if product:
            prod= self.pool.get('product.product').browse(cr, uid,product)
            return {'value': { 'name':prod.name,'product_uom':prod.uom_po_id.id}}



car_faults()



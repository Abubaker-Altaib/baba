-
  I create a purchase order.
-
  !record {model: purchase.order, id: purchase_order7}:
    partner_id: base.res_partner_4
    order_line:
      - product_id: product.product_product_pc2
        price_unit: 40
        product_qty: 5
      - product_id: product.product_product_mb1
        price_unit: 45
        product_qty: 15.0
      - product_id: product.product_product_mb2
        price_unit: 45
        product_qty: 15
        

-
  I create another purchase order.        
-
  !record {model: purchase.order, id: purchase_order8}:
    partner_id: base.res_partner_desertic_hispafuentes
    order_line:
      - product_id: product.product_product_0
        product_qty: 5
      - product_id: product.product_product_1
        product_qty: 15

-
   In order to test the cancel flow, I start it from canceling confirmed purchase order.
-
  I confirm the purchase order.
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order7}
  
  
-
  I check the "Approved" status  after confirmed RFQ.
-
  !assert {model: purchase.order, id: purchase_order7}:
    - state == 'approved'
    
    
-
  First I cancel  receptions related to this order if order shipped.
-
  !python {model: purchase.order}: |
    order = self.browse(cr, uid, ref("purchase_order7"))
    self.pool.get('stock.picking').action_cancel(cr, uid, [picking.id for picking in  order.picking_ids])


-
  I check order status in "Shipping Exception".
-
  !python {model: purchase.order}: |
    order = self.browse(cr, uid, ref("purchase_order7"))
    assert order.state == "except_picking", "order should be in Ship Exception state after cancel shipment"    


-
  Now I am able to cancel purchase order.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("purchase_order7")])


-
  I check that order is cancelled.
-
  !assert {model: purchase.order, id: purchase_order7}:
    - state == 'cancel'


-
  After cancel the order, I check that it's related invoice cancelled.
-
  !python {model: purchase.order}: |
    order = self.browse(cr, uid, ref("purchase_order7"))
    assert order.invoice_ids[0].state == "cancel", "order's related invoice should be cancelled"   


-
  Now again set cancelled order to draft.
-
  !python {model: purchase.order}: |
    self.action_cancel_draft(cr, uid, [ref("purchase_order7")])


-
  Now I again to cancel draft order.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("purchase_order7")])


-
  I check that order is cancelled.
-
  !assert {model: purchase.order, id: purchase_order7}:
    - state == 'cancel'


-
  I set the order to draft
-
   !python {model: purchase.order}: |
    self.action_cancel_draft(cr, uid, [ref("purchase_order8")])


-
  I check that order is draft.
-
  !assert {model: purchase.order, id: purchase_order8}:
    - state == 'draft'


-  
  I check that the new field data is changed.
-
  !assert {model: purchase.order, id: purchase_order8}:
    - test_report_print == '/'
 